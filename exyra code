def lcd_init():
  GPIO.setwarnings(False)
  GPIO.setmode(GPIO.BCM)       # Use BCM GPIO numbers
  GPIO.setup(LCD_E, GPIO.OUT)  # E
  GPIO.setup(LCD_RS, GPIO.OUT) # RS
  GPIO.setup(LCD_D4, GPIO.OUT) # DB4
  GPIO.setup(LCD_D5, GPIO.OUT) # DB5
  GPIO.setup(LCD_D6, GPIO.OUT) # DB6
  GPIO.setup(LCD_D7, GPIO.OUT) # DB7
    # Initialise display
  # Intialization step 1: Function Set command
  # 00110000 : bit 6->1 means this is the function set instruction
  #            bit 5->0 means use 4-bit bus
  #            bit 4->0 means 1 line LCD. ->1 means 2 line LCD
  #            bit 3->0 means 5x7 dots  
  lcd_display(0b00101000,LCD_CMD)
  
  # Intialization Step 2: Display on command
  # 00001111: bit 1->1 means set cursor to blinking. 0->no blink
  #           bit 2->1 means set cursor on. 0->no cursor
  #           bit 3->1 means set display on
  #           bit 4->1 means this is a display control instruction
  # If cursor and blink are set to on, they'll display only after a clear command is issued.  
  lcd_display(0b00001100,LCD_CMD)
  
  # Step 3: Clear display command
  lcd_display(0b00000001,LCD_CMD)
 
def lcd_display(bits, mode):
  time.sleep(0.001)
  GPIO.output(LCD_RS, mode)
  GPIO.output(LCD_D4, False)
  GPIO.output(LCD_D5, False)
  GPIO.output(LCD_D6, False)
  GPIO.output(LCD_D7, False)
  if bits&0x10==0x10:
    GPIO.output(LCD_D4, True)
  if bits&0x20==0x20:
    GPIO.output(LCD_D5, True)
  if bits&0x40==0x40:
    GPIO.output(LCD_D6, True)
  if bits&0x80==0x80:
    GPIO.output(LCD_D7, True)
  # Toggle 'Enable' pin
  lcd_toggle_enable()
  # Low bits
  GPIO.output(LCD_D4, False)
  GPIO.output(LCD_D5, False)
  GPIO.output(LCD_D6, False)
  GPIO.output(LCD_D7, False)
  if bits&0x01==0x01:
    GPIO.output(LCD_D4, True)
  if bits&0x02==0x02:
    GPIO.output(LCD_D5, True)
  if bits&0x04==0x04:
    GPIO.output(LCD_D6, True)
  if bits&0x08==0x08:
    GPIO.output(LCD_D7, True)
  # Toggle 'Enable' pin
  lcd_toggle_enable()
 
    
def lcd_toggle_enable():
  # Toggle enable
  time.sleep(E_DELAY)
  GPIO.output(LCD_E, True)
  time.sleep(E_PULSE)
  GPIO.output(LCD_E, False)
  time.sleep(E_DELAY)
 
    
def lcd_string(message,line):
  # Send string to display
  message = message.ljust(LCD_WIDTH," ")
  lcd_display(line, LCD_CMD)
  for i in range(LCD_WIDTH):
    lcd_display(ord(message[i]),LCD_CHR)


 
# Define GPIO to LCD mapping
LCD_RS = 16
LCD_E  = 12
LCD_D4 = 24
LCD_D5 = 23
LCD_D6 = 18
LCD_D7 = 15
 
# Define some device constants
LCD_WIDTH = 16    # Maxiumum characters per line
LCD_CHR = True
LCD_CMD = False
 
LCD_LINE_1 = 0x80 # LCD RAM address for the 1st line
LCD_LINE_2 = 0xC0 # LCD RAM address for the 2nd line
 
# Timing constants
E_PULSE = 0.0001
E_DELAY = 0.0001
 
 